# REFACTORED: .github/workflows/update_all_data.yml

name: Update All Ticker Data (Daily)

on:
    # 매일 UTC 20:00 (한국 시간 오전 5시)에 실행
    schedule:
        - cron: '0 20 * * *'
    # GitHub Actions 탭에서 수동으로 실행 가능하도록 설정
    workflow_dispatch:

# Git에 변경 사항을 푸시하기 위해 쓰기 권한을 부여합니다.
permissions:
    contents: write

jobs:
    update-all:
        runs-on: ubuntu-latest

        steps:
            # 1. 리포지토리 코드를 가져옵니다.
            - name: Checkout main branch
              uses: actions/checkout@v4

            # 2. Node.js 환경을 설정합니다.
            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            # 3. Python 환경을 설정합니다.
            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.11'
                  cache: 'pip'
                  cache-dependency-path: 'requirements.txt'

            # 4. Node.js 의존성을 설치합니다.
            - name: Install Node.js dependencies
              run: npm install

            # 5. Python 의존성을 설치합니다.
            - name: Install Python dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            # --- 데이터 업데이트 파이프라인 (순서가 매우 중요) ---
            # 단계 1: 실시간 환율 업데이트
            - name: 1. Update historical exchange rate data
              run: node scripts/fetch_all_exchange_rates.js

            # 단계 2: 소스 파일(public/nav/*.json)의 IPO 날짜를 확인하고 'upcoming' 상태를 업데이트합니다.
            - name: 2. Sync IPO dates and upcoming status
              run: npm run add-ipo-dates

            # 단계 3: 업데이트된 소스 파일을 기반으로 최종 nav.json을 생성합니다.
            - name: 3. Generate final nav.json
              run: npm run generate-nav

            # 단계 4: Node.js 스크립트로 과거 '주가' 데이터를 가져옵니다.
            - name: 4. Update historical price data (Node.js/yahoo-finance2)
              run: npm run update-data

            # 단계 5: Python 스크립트로 과거 '배당' 데이터를 가져옵니다.
            - name: 5. Update historical dividend data (Python/yfinance)
              run: python scripts/update_dividends.py

            # 단계 6: Python 스크립트가 미리 생성된 주가/배당 데이터를 사용하여 dividendHistory를 가공합니다.
            - name: 6. Process and enrich dividend history for display
              run: python scripts/scraper_dividend.py

            # 단계 7: Python 스크립트로 최신 시세 및 기업 정보를 가져옵니다.
            - name: 7. Update latest ticker info
              run: python scripts/scraper_info.py

            # 단계 8: 사이드바용 실시간 시세 데이터(live-data.json) 생성
            - name: 8. Generate live data for sidebar
              run: python scripts/generate_live_data.py

            # 단계 9: Firestore에서 북마크 인기 데이터를 집계하여 popular.json 생성
            - name: 9. Aggregate bookmark popularity from Firestore
              env:
                  FIRESTORE_SA_KEY: ${{ secrets.FIRESTORE_SA_KEY }}
              run: python scripts/aggregate_popularity.py

            # 단계 10: 캘린더 이벤트 데이터 생성
            - name: 10. Generate aggregated calendar events data
              run: npm run generate-calendar-events

            # 단계 11: 사이드바에 표시할 티커 데이터 생성
            - name: 11. Generate aggregated sidebar tickers data
              run: npm run generate-sidebar-tickers

            # 단계 12: 변경된 모든 데이터를 일관된 포맷으로 정리
            - name: 12. Format generated data files
              run: npm run format:data

            # --- 변경 사항 커밋 및 푸시 ---
            - name: Check for file changes
              id: git_status
              run: |
                  if [[ -n "$(git status --porcelain)" ]]; then
                    echo "changes=true" >> $GITHUB_OUTPUT
                  else
                    echo "changes=false" >> $GITHUB_OUTPUT
                  fi

            - name: Commit and push changes
              if: steps.git_status.outputs.changes == 'true'
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
                  git add .
                  # [핵심 수정] 커밋 메시지에 변경된 파일 목록을 포함
                  COMMIT_MSG="⚙️ Auto: Update all ticker data

                  Changed files:
                  $(git status --porcelain)"
                  git commit -m "$COMMIT_MSG"
                  git push
