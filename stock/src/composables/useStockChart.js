// stock/src/composables/useStockChart.js

import { ref, computed } from 'vue';
import { useWeeklyChart } from './charts/useWeeklyChart';
import { usePriceChart } from './charts/usePriceChart';
import { useBreakpoint } from '@/composables/useBreakpoint';
import { parseYYMMDD } from '@/utils/date.js';

export function useStockChart(dividendHistory, tickerInfo, isPriceChartMode, selectedTimeRange) {
    const chartData = ref(null);
    const chartOptions = ref(null);

    const { deviceType, isDesktop } = useBreakpoint();

    const chartDisplayData = computed(() => {
        if (!dividendHistory.value || dividendHistory.value.length === 0) return [];

        const now = new Date();
        // üëá [ÌïµÏã¨ ÏàòÏ†ï 1] Ïò§Îäò ÎÇ†ÏßúÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÎØ∏Îûò Îç∞Ïù¥ÌÑ∞Î•º ÌïÑÌÑ∞ÎßÅÌïòÎäî Î°úÏßÅÏùÑ Î®ºÏ†Ä Ï†ÅÏö©Ìï©ÎãàÎã§.
        // ÏãúÍ∞ÑÏùÑ 0ÏúºÎ°ú ÏÑ§Ï†ïÌïòÏó¨ ÎÇ†ÏßúÎßå ÎπÑÍµêÌïòÎèÑÎ°ù Ìï©ÎãàÎã§.
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const pastAndPresentData = dividendHistory.value.filter(item => {
            const itemDate = parseYYMMDD(item["Î∞∞ÎãπÎùΩ"]);
            return itemDate && itemDate <= today;
        });

        // Í∏∞Í∞Ñ ÏÑ†ÌÉù ÌïÑÌÑ∞ÎßÅ
        if (selectedTimeRange.value === 'Max' || !selectedTimeRange.value) {
            // Max ÎòêÎäî ÏÇ¨Ïö©Ïûê Ï§å/Ìå¨ ÏÉÅÌÉúÏùº Í≤ΩÏö∞, ÌïÑÌÑ∞ÎßÅÎêú Í≥ºÍ±∞/ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤¥Î•º ÏÇ¨Ïö©
            return [...pastAndPresentData].reverse();
        }

        let cutoffDate;
        const rangeValue = parseInt(selectedTimeRange.value);
        const rangeUnit = selectedTimeRange.value.slice(-1);

        if (tickerInfo.value?.frequency === 'Weekly' && !isPriceChartMode.value) {
            let startDate = new Date(now);
            if (rangeUnit === 'M') {
                startDate.setMonth(now.getMonth() - rangeValue);
            } else {
                startDate.setFullYear(now.getFullYear() - rangeValue);
            }
            cutoffDate = new Date(startDate.getFullYear(), startDate.getMonth(), 1);
        } else {
            if (rangeUnit === 'M') {
                cutoffDate = new Date(new Date().setMonth(now.getMonth() - rangeValue));
            } else {
                cutoffDate = new Date(new Date().setFullYear(now.getFullYear() - rangeValue));
            }
        }
        
        // üëá [ÌïµÏã¨ ÏàòÏ†ï 2] ÌïÑÌÑ∞ÎßÅ ÎåÄÏÉÅÏùÑ ÏõêÎ≥∏(dividendHistory)Ïù¥ ÏïÑÎãå, ÎØ∏ÎûòÍ∞Ä Ï†úÍ±∞Îêú Îç∞Ïù¥ÌÑ∞(pastAndPresentData)Î°ú Î≥ÄÍ≤Ω
        return pastAndPresentData
            .filter((item) => parseYYMMDD(item["Î∞∞ÎãπÎùΩ"]) >= cutoffDate)
            .reverse();
    });

    const updateChart = () => {
        const data = chartDisplayData.value;
        const frequency = tickerInfo.value?.frequency;
        
        if (!data || data.length === 0) {
            chartData.value = null; chartOptions.value = null; return;
        }

        const documentStyle = getComputedStyle(document.documentElement);
       const themeOptions = {
      textColor: documentStyle.getPropertyValue("--p-text-color"),
      textColorSecondary: documentStyle.getPropertyValue(
        "--p-text-muted-color"
      ),
      surfaceBorder: documentStyle.getPropertyValue("--p-content-border-color"),
      zoomOptions: {
        pan: {
          enabled: true,
          mode: "x",
          onPanComplete: () => {
            selectedTimeRange.value = null;
          },
        },
        zoom: {
          wheel: { enabled: true },
          pinch: { enabled: true },
          mode: "x",
          onZoomComplete: () => {
            selectedTimeRange.value = null;
          },
        },
      },
    };
        const sharedOptions = {
      data,
      deviceType: deviceType.value,
      group: tickerInfo.value?.group,
      theme: themeOptions,
    };

if (isPriceChartMode.value) {
      const { priceChartData, priceChartOptions } =
        usePriceChart(sharedOptions);
      chartData.value = priceChartData;
      chartOptions.value = priceChartOptions;
    } else {
      if (frequency === "Weekly") {
        const { weeklyChartData, weeklyChartOptions } =
          useWeeklyChart(sharedOptions);
        chartData.value = weeklyChartData;
        chartOptions.value = weeklyChartOptions;
      } else {
        const { priceChartData, priceChartOptions } =
          usePriceChart(sharedOptions);
        chartData.value = priceChartData;
        chartOptions.value = priceChartOptions;
      }
    }
    };

    return { chartData, chartOptions, updateChart };
}